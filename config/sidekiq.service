# Based on the following article:
# https://przbadu.medium.com/part-2-deploying-rails-application-nginx-passenger-sidekiq-redis-ff61c29fa3a2
#
# This file tells systemd how to run Sidekiq as a 24/7 long-running daemon.
#
# Unit file is created into /etc/systemd/system/ for execution on SLES15@BFS
# The Unit file drives only one instance of the process. To run multiple processes,
# create multiple Unit files and register multiple services
#
# Register and control service:
#   - systemctl enable sidekiq
#   - systemctl {start,stop,restart} sidekiq
#   - journalctl -u sidekiq -rn 100 (shows the last 100 lines of log output)
[Unit]
# Start the service only once the network and logging subsystems are available,
# consider adding redis-server.service if Redis is local and systemd-managed.
Description=sidekiq
After=syslog.target network.target redis-server.service

[Service]
# Sidekiq automatically supports systemd's `Type=notify` and watchdog service monitoring.
# If your Sidekiq process locks up, systemd's watchdog will restart it within seconds.
Type=notify
WatchdogSec=10
WorkingDirectory=/home/a80838986/sis-portal
# If you use rbenv:
ExecStart=/bin/bash -lc 'exec /home/a80838986/.rbenv/shims/bundle exec sidekiq -e validation -C /home/a80838986/sis-portal/config/sidekiq.yml -r /home/a80838986/sis-portal'
# Use `systemctl kill -s TSTP sidekiq` to quiet the Sidekiq process

# !!! Change this to your deploy user account !!!
User=a80838986
Group=linuxusers
UMask=0002

# Greatly reduce Ruby memory fragmentation and heap usage
Environment=MALLOC_ARENA_MAX=2

# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog (Ubuntu) or /var/log/messages (CentOS)
StandardOutput=syslog
StandardError=syslog
# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target
